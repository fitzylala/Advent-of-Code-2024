import java.util.ArrayList;

public class Day10 {

    public static int findTrailheadsScore(int row, int position, String[] rows, ArrayList<Integer[]> foundNines, int currentValue) {
        foundNines = new ArrayList<Integer[]>(); // this line for part 2
        if (row < 0 || row >= rows.length || position < 0 || position >= rows[row].length()) {
            return 0; // Make sure value is in string[] rows
        }
        int cellValue = Integer.valueOf(String.valueOf(rows[row].charAt(position)));
        if (cellValue != currentValue) {
            return 0;
        }

        if (cellValue == 9) {
            for (Integer[] coordinates : foundNines) {
                if (coordinates[0] == row && coordinates[1] == position) {
                    return 0;
                }
            }
            foundNines.add(new Integer[]{row, position});
            return 1;
        }
        int paths = 0;
        paths += findTrailheadsScore(row - 1, position, rows, foundNines, currentValue + 1);
        paths += findTrailheadsScore(row + 1, position, rows, foundNines, currentValue + 1);
        paths += findTrailheadsScore(row, position - 1, rows, foundNines, currentValue + 1);
        paths += findTrailheadsScore(row, position + 1, rows, foundNines, currentValue + 1);
        return paths;
    }

    public static void main(String args[]){
        String input = "45678701021256787218432154301232100012334301023456789\n" +
                "32569892430543298909845067210145621965421012310545869\n" +
                "01210743549612187610756778143296534874310123458930978\n" +
                "12323651258703066525643889050387546789210234567821567\n" +
                "01434210367012178434512918761236695694391349650131054\n" +
                "12544303438124569232101109678945784321487658743232343\n" +
                "43695496549433450143001234532034653210156961234589787\n" +
                "94786987834342100154519873541128763165432870234671096\n" +
                "85677889929854343267610565690639454076501210165692345\n" +
                "76012870010767256998701234788748348987432101156787654\n" +
                "01043961171258107887898345659654239858901101089810123\n" +
                "32154552987349016576987454564980108765432232123209874\n" +
                "43960143476987657607876523875676501678921349854112365\n" +
                "54871232564890548510965014934189432578900458963012453\n" +
                "69890121465431239423454876821054329657811467874501412\n" +
                "78781230656322102347623945498765018746324320189432303\n" +
                "45610945567212121098510130340121201235435410234534564\n" +
                "44327876438901010101498321233290345110346761809621875\n" +
                "34387654323432129812367321044789876011289898918760976\n" +
                "45297890012343456703455433445602345895670767823451987\n" +
                "56187781201278914567526932563211056734321296744589854\n" +
                "67096654302107803498017801074787654321234585430076763\n" +
                "78945109213456012332101301985698543210987676121125892\n" +
                "21032238376788768945432452394987650121789678032434981\n" +
                "32561247487699854876983345401276345430678549140123470\n" +
                "23470056794521003123476236982345036781565432101210565\n" +
                "14980129873430412001569107810034129092634307870389874\n" +
                "05691234562541343432018098941125678104321216921010123\n" +
                "06788765101632234589127657832103543219450325432167012\n" +
                "12109453210762103678934566543012354308765014703458983\n" +
                "43898344789899872100129875414983989412894327812565410\n" +
                "56701235692198561091223014305894876543781016945678320\n" +
                "12345106541085432782014323216765321789692345238769801\n" +
                "01416787632176306654105450125601450694547654199654432\n" +
                "12109898501201217653296961234702364543498703080123569\n" +
                "01234549654323898741787870149810676032107012678034078\n" +
                "67899678760015677230765487654321980121978710569985127\n" +
                "58908707871234982101896398923450890120879623450276434\n" +
                "43211216910123878982363210110961051234566542141105589\n" +
                "52890345034987965985476545607872340345651033032234676\n" +
                "01761212125675654876983432787401456978762122345897655\n" +
                "10354305430234503210012301294301967869887831056798587\n" +
                "23487416521105012342121345385210876778896990987123496\n" +
                "96596547012276109653010256106321236569045781234012345\n" +
                "87432108983489298764560187287810345652134650965421004\n" +
                "76545017698548345675078894396923456743221045874540218\n" +
                "89632123087632210982189123405410567892100038973234389\n" +
                "56749834128901043983458016512321098754321122980198476\n" +
                "43898765439456712276567087695632347665430101076567567\n" +
                "32109650169329803125690198787541056578920122345445898\n" +
                "78980543278019874034787239645670567810110233410336765\n" +
                "65211230165216565129876543532789436921898398561221234\n" +
                "34302321254305653210210123401890125432765487652310123";

        String[] rows = input.split("\\R+");
        int counter = 0;
        for (int i=0; i< rows.length; i++) {
            for (int j=0; j<rows[i].length(); j++) {

                if (rows[i].charAt(j) == '0') {
                    ArrayList<Integer[]> foundNines = new ArrayList<>();
                    int these9s = findTrailheadsScore(i, j, rows, foundNines, 0);
                    System.out.println(these9s + " nines found at row " + i + " character " + j);
                    counter += these9s;
                }

            }
        }
        System.out.println("Num of 9s total: " + counter);


    }
}
